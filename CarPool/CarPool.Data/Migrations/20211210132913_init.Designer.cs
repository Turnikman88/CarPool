// <auto-generated />
using System;
using CarPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPool.Data.Migrations
{
    [DbContext(typeof(CarPoolDBContext))]
    [Migration("20211210132913_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(5184),
                            IsDeleted = false,
                            Latitude = 42.6860436m,
                            Longitude = 23.320311m,
                            StreetName = "Vasil Levski 14"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7350),
                            IsDeleted = false,
                            Latitude = 42.1382815m,
                            Longitude = 24.7604295m,
                            StreetName = "bulevard Iztochen 23"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7389),
                            IsDeleted = false,
                            Latitude = 43.2126824m,
                            Longitude = 27.9168517m,
                            StreetName = "bulevard Tsar Osvoboditel 83b"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7392),
                            IsDeleted = false,
                            Latitude = 41.0403314m,
                            Longitude = 28.939206m,
                            StreetName = "Defterdar, Ayvansaray Cd., 34050 Eyüpsultan"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7394),
                            IsDeleted = false,
                            Latitude = 37.981142m,
                            Longitude = 23.732380m,
                            StreetName = "Ippokratous 1"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 6,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7397),
                            IsDeleted = false,
                            Latitude = 40.640014m,
                            Longitude = 22.944397m
                        },
                        new
                        {
                            Id = 7,
                            CityId = 7,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7399),
                            IsDeleted = false,
                            Latitude = 38.232467m,
                            Longitude = 21.736326m
                        },
                        new
                        {
                            Id = 8,
                            CityId = 8,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7401),
                            IsDeleted = false,
                            Latitude = 47.151716m,
                            Longitude = 27.587696m
                        },
                        new
                        {
                            Id = 9,
                            CityId = 9,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(7403),
                            IsDeleted = false,
                            Latitude = 41.669344m,
                            Longitude = 26.568406m
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(8051),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(8278),
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(8286),
                            IsDeleted = false,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(8288),
                            IsDeleted = false,
                            Name = "NotConfirmed"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasCheckConstraint("Password_contains_space", "Password NOT LIKE '% %'");

                    b.HasData(
                        new
                        {
                            Id = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 98, DateTimeKind.Utc).AddTicks(579),
                            Email = "kalin@telerik.com",
                            EmailConfirmed = true,
                            FirstName = "Kalin",
                            LastName = "Balimezov",
                            Password = "$2a$11$/GxNc841gGq2iT57lT1XWu9piehx8Di//OiQ/.93HnOSLVGPNRzOi",
                            PhoneNumber = "+35920768005",
                            Username = "kalin"
                        },
                        new
                        {
                            Id = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            AddressId = 2,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 220, DateTimeKind.Utc).AddTicks(8397),
                            Email = "petio@mvc.net",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            LastName = "Petrov",
                            Password = "$2a$11$be2NgGfz.37bFdDqWfRe8.3vi2jw7X6zN8qkTIp3F47jIqePvlzvG",
                            PhoneNumber = "+35924492877",
                            Username = "petio_p"
                        },
                        new
                        {
                            Id = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            AddressId = 3,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 335, DateTimeKind.Utc).AddTicks(9961),
                            Email = "koksal@asd.tr",
                            EmailConfirmed = true,
                            FirstName = "Koksal",
                            LastName = "Baba",
                            Password = "$2a$11$zQBfF3EUcMtvA0MITD1az.lKUk59pqLNtwS/mwBfaPTaYqJrCpnki",
                            PhoneNumber = "+35922649764",
                            Username = "koksal"
                        },
                        new
                        {
                            Id = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            AddressId = 3,
                            ApplicationRoleId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 451, DateTimeKind.Utc).AddTicks(1590),
                            Email = "indebt@greece.gov",
                            EmailConfirmed = true,
                            FirstName = "Nikolaos",
                            LastName = "Tsitsibaris",
                            Password = "$2a$11$fKZzUGLhKXB/ess2fl6oSOT8WnfZzlIPatz0lDPdXAQFh0NoDfZCm",
                            PhoneNumber = "+35924775508",
                            Username = "Tsitsibaris"
                        },
                        new
                        {
                            Id = new Guid("60f19e07-2473-4533-8f00-d7c8f5dd8fa3"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 566, DateTimeKind.Utc).AddTicks(3616),
                            Email = "joro@telerik.com",
                            EmailConfirmed = true,
                            FirstName = "georgi",
                            LastName = "petrov",
                            Password = "$2a$11$q6zhXX/6BeKAKV1pNolPSOouwffp3hm0AEnmHYnOeXDhedEA3qjA.",
                            PhoneNumber = "+35920768015",
                            Username = "georgi"
                        },
                        new
                        {
                            Id = new Guid("4128f5ba-d1df-4d45-9a23-001e1fb79b02"),
                            AddressId = 1,
                            ApplicationRoleId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 683, DateTimeKind.Utc).AddTicks(6255),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "$2a$11$cu888TZita15heEwpoM21.E4CfhzWF06VGUdLIYooU67qsAad1qI.",
                            PhoneNumber = "+35920738011",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            AddressId = 4,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 803, DateTimeKind.Utc).AddTicks(1387),
                            Email = "merkez@grece.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Merkez",
                            Password = "$2a$11$LyGJ2Y/zPNKKBOoKsmRA6.TLe1Qin.c4S5Ijtju2MU6fcs0AJvtEu",
                            PhoneNumber = "+32920728011",
                            Username = "Carlitos"
                        },
                        new
                        {
                            Id = new Guid("4c2c484f-909a-401a-9237-1b073af6be85"),
                            AddressId = 5,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 925, DateTimeKind.Utc).AddTicks(348),
                            Email = "ramen@aoc.com",
                            EmailConfirmed = true,
                            FirstName = "Ramos",
                            LastName = "Enerto",
                            Password = "$2a$11$ZPzZr6We8iY.d2ROIodq0.FbZZIJnHt5X36Y8IhZhJqdPb5SUtx4K",
                            PhoneNumber = "+3292234215",
                            Username = "Ramen"
                        },
                        new
                        {
                            Id = new Guid("ea3aa14d-2240-430e-b29e-54df0c920b4c"),
                            AddressId = 9,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 44, DateTimeKind.Utc).AddTicks(8827),
                            Email = "pewdie@yt.com",
                            EmailConfirmed = true,
                            FirstName = "Felix",
                            LastName = "Kjellberg ",
                            Password = "$2a$11$qSbJwE8PPepClvUpyC.FB.LQD4GO5d1dz8mTiwtRT6bnE13zuX9Au",
                            PhoneNumber = "+3291238015",
                            Username = "PewDie"
                        },
                        new
                        {
                            Id = new Guid("773e6f71-e337-4522-b1c2-d27f0e2b8ae0"),
                            AddressId = 9,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 165, DateTimeKind.Utc).AddTicks(5502),
                            Email = "christopher@nip.se",
                            EmailConfirmed = true,
                            FirstName = "Christopher",
                            LastName = "Alesund",
                            Password = "$2a$11$R83Ci5qGuzeOV9kzpH7GROZX2VUBHKlRlSUrv7wGCegoRuGfWEDXy",
                            PhoneNumber = "+3292233015",
                            Username = "Get_RighT"
                        },
                        new
                        {
                            Id = new Guid("fb66c8d5-a994-42eb-a5be-6f606f95736a"),
                            AddressId = 8,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 284, DateTimeKind.Utc).AddTicks(5959),
                            Email = "Kiro123$",
                            EmailConfirmed = true,
                            FirstName = "Kiril",
                            LastName = "Stanoev",
                            Password = "$2a$11$X/Yp3aFHo79rO5.7JUFVDuYYqmJWBtROlVCMQCp0c5uMxWjRt31mu",
                            PhoneNumber = "+3298883015",
                            Username = "KiroVijan"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BlockedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Bans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            BlockedDue = new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            BlockedOn = new DateTime(2021, 12, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(6977)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            BlockedOn = new DateTime(2021, 12, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 405, DateTimeKind.Utc).AddTicks(8549)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(2564),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3488),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3513),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3515),
                            IsDeleted = false,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3517),
                            IsDeleted = false,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3521),
                            IsDeleted = false,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3523),
                            IsDeleted = false,
                            Name = "Patras"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3524),
                            IsDeleted = false,
                            Name = "Yash"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3526),
                            IsDeleted = false,
                            Name = "Odrin"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3528),
                            IsDeleted = false,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3530),
                            IsDeleted = false,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 97, DateTimeKind.Utc).AddTicks(3531),
                            IsDeleted = false,
                            Name = "Craiova"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 96, DateTimeKind.Utc).AddTicks(218),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 96, DateTimeKind.Utc).AddTicks(1392),
                            IsDeleted = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 96, DateTimeKind.Utc).AddTicks(1412),
                            IsDeleted = false,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 12, 96, DateTimeKind.Utc).AddTicks(1414),
                            IsDeleted = false,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.GoogleAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GoogleAccount");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5023),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5578),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5594),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5595),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = new Guid("60f19e07-2473-4533-8f00-d7c8f5dd8fa3"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5596),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = new Guid("4128f5ba-d1df-4d45-9a23-001e1fb79b02"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5598),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5599),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = new Guid("4c2c484f-909a-401a-9237-1b073af6be85"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5600),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = new Guid("ea3aa14d-2240-430e-b29e-54df0c920b4c"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5601),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = new Guid("773e6f71-e337-4522-b1c2-d27f0e2b8ae0"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(5602),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedByUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            ApplicationUserId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(6276),
                            Feedback = "Nice car",
                            IsReport = false,
                            TripId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            AddedByUserId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            ApplicationUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7462),
                            Feedback = "Bad person",
                            IsReport = true,
                            TripId = 2,
                            Value = 0
                        },
                        new
                        {
                            Id = 3,
                            AddedByUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            ApplicationUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7653),
                            Feedback = "Great trip",
                            IsReport = false,
                            TripId = 3,
                            Value = 5
                        },
                        new
                        {
                            Id = 4,
                            AddedByUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            ApplicationUserId = new Guid("60f19e07-2473-4533-8f00-d7c8f5dd8fa3"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7665),
                            Feedback = "dirty car, good person",
                            IsReport = false,
                            TripId = 4,
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            AddedByUserId = new Guid("60f19e07-2473-4533-8f00-d7c8f5dd8fa3"),
                            ApplicationUserId = new Guid("4128f5ba-d1df-4d45-9a23-001e1fb79b02"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7666),
                            Feedback = "Great trip",
                            IsReport = false,
                            TripId = 5,
                            Value = 3
                        },
                        new
                        {
                            Id = 6,
                            AddedByUserId = new Guid("4128f5ba-d1df-4d45-9a23-001e1fb79b02"),
                            ApplicationUserId = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7671),
                            Feedback = "safe driver",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        },
                        new
                        {
                            Id = 7,
                            AddedByUserId = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            ApplicationUserId = new Guid("4c2c484f-909a-401a-9237-1b073af6be85"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7672),
                            Feedback = "Bad driver",
                            IsReport = true,
                            TripId = 5,
                            Value = 0
                        },
                        new
                        {
                            Id = 8,
                            AddedByUserId = new Guid("4c2c484f-909a-401a-9237-1b073af6be85"),
                            ApplicationUserId = new Guid("ea3aa14d-2240-430e-b29e-54df0c920b4c"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7678),
                            Feedback = "Good friend",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        },
                        new
                        {
                            Id = 9,
                            AddedByUserId = new Guid("ea3aa14d-2240-430e-b29e-54df0c920b4c"),
                            ApplicationUserId = new Guid("773e6f71-e337-4522-b1c2-d27f0e2b8ae0"),
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(7679),
                            Feedback = "Best driver",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StartAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("StartAddressId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalComment = "(No comment)",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(474),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(1548),
                            DestinationAddressId = 2,
                            Distance = 340,
                            DriverId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            DurationInMinutes = 90,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2352),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2399),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2432),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2434),
                            DestinationAddressId = 2,
                            Distance = 210,
                            DriverId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            DurationInMinutes = 110,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 4,
                            AdditionalComment = "Long comment here",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2437),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2438),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdditionalComment = "Additional comments below",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2441),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2442),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 6,
                            AdditionalComment = "follow me on twitter",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2447),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2449),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 7,
                            AdditionalComment = "NO EATING",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2451),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2452),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 8,
                            AdditionalComment = "CHEAP AND FAST",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2455),
                            DepartureTime = new DateTime(2021, 12, 12, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2456),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdditionalComment = "FAST FAST FAST",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2458),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2459),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdditionalComment = "No pets",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2462),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2464),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdditionalComment = "NO SMOKING NO FOOD",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2466),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2467),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 19.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 12,
                            AdditionalComment = "NO STOPS",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2710),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2762),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.55m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 13,
                            AdditionalComment = "Good looking and friendly",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2780),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2781),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.13m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 14,
                            AdditionalComment = "Fast car",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2784),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2785),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 15,
                            AdditionalComment = "High price",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2787),
                            DepartureTime = new DateTime(2021, 12, 10, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2788),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.21m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 16,
                            AdditionalComment = "Im not alone",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2791),
                            DepartureTime = new DateTime(2021, 12, 8, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2792),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 21.21m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdditionalComment = "No kids",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(2795),
                            DepartureTime = new DateTime(2021, 12, 8, 15, 29, 13, 406, DateTimeKind.Local).AddTicks(2796),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 12.23m,
                            StartAddressId = 1
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(3749)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4248)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4263)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4264)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4265)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4267)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4268)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 4,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4269)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 5,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4269)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 6,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4271)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 7,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4272)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 8,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4273)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            TripId = 15,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4273)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            TripId = 16,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4274)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            TripId = 15,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4275)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            TripId = 16,
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 406, DateTimeKind.Utc).AddTicks(4277)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelConsumptionPerHundredKilometers")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("910ad796-caf7-4c98-8f81-0d75cc69414f"),
                            Color = "Red",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(4107),
                            FuelConsumptionPerHundredKilometers = 12.0,
                            IsDeleted = false,
                            Model = "Ferrari"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("ede21b4c-a93d-461e-bd0d-6bad5e8ede5f"),
                            Color = "Blue",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5308),
                            FuelConsumptionPerHundredKilometers = 8.0,
                            IsDeleted = false,
                            Model = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("1e85174b-c240-4120-805b-9eae89e53161"),
                            Color = "Black",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5356),
                            FuelConsumptionPerHundredKilometers = 10.0,
                            IsDeleted = false,
                            Model = "Mercedes S Class"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("2de14c4e-99c5-4d56-a1be-ce0eeb40d879"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5375),
                            FuelConsumptionPerHundredKilometers = 15.0,
                            IsDeleted = false,
                            Model = "BMW M5"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = new Guid("60f19e07-2473-4533-8f00-d7c8f5dd8fa3"),
                            Color = "Green",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5393),
                            FuelConsumptionPerHundredKilometers = 11.0,
                            IsDeleted = false,
                            Model = "Lambo"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = new Guid("4128f5ba-d1df-4d45-9a23-001e1fb79b02"),
                            Color = "Black",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5421),
                            FuelConsumptionPerHundredKilometers = 9.0,
                            IsDeleted = false,
                            Model = "Golf4"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = new Guid("22c78551-a84e-49c4-b705-c615698ac610"),
                            Color = "Orange",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5440),
                            FuelConsumptionPerHundredKilometers = 10.0,
                            IsDeleted = false,
                            Model = "Dacia"
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = new Guid("4c2c484f-909a-401a-9237-1b073af6be85"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5457),
                            FuelConsumptionPerHundredKilometers = 6.0,
                            IsDeleted = false,
                            Model = "BMW M5"
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = new Guid("ea3aa14d-2240-430e-b29e-54df0c920b4c"),
                            Color = "Carbon Black",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5486),
                            FuelConsumptionPerHundredKilometers = 2.0,
                            IsDeleted = false,
                            Model = "Tesla Model S"
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = new Guid("773e6f71-e337-4522-b1c2-d27f0e2b8ae0"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 10, 13, 29, 13, 403, DateTimeKind.Utc).AddTicks(5510),
                            FuelConsumptionPerHundredKilometers = 16.0,
                            IsDeleted = false,
                            Model = "Mercedes-Benz S Coupe"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "Address")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Ban")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.Ban", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Inbox", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("InboxMessages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.ProfilePicture", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "DestinationAddress")
                        .WithMany("TripsDestinationAddress")
                        .HasForeignKey("DestinationAddressId")
                        .HasConstraintName("FK_Trips_DestinationAddresses")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Trips_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "StartAddress")
                        .WithMany("TripsStartAddress")
                        .HasForeignKey("StartAddressId")
                        .HasConstraintName("FK_Trips_StartAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("TripsAsPassenger")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_TripPassengerRelation_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripPassengerRelation_Trips")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.UserVehicle", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
