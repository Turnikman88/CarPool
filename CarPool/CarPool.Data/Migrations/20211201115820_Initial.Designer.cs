// <auto-generated />
using System;
using CarPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPool.Data.Migrations
{
    [DbContext(typeof(CarPoolDBContext))]
    [Migration("20211201115820_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(1104),
                            IsDeleted = false,
                            Latitude = 42.6860436m,
                            Longitude = 23.320311m,
                            StreetName = "Vasil Levski 14"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4734),
                            IsDeleted = false,
                            Latitude = 42.1382775m,
                            Longitude = 24.7604295m,
                            StreetName = "blv. Iztochen 23"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4790),
                            IsDeleted = false,
                            Latitude = 41.022079m,
                            Longitude = 28.9483964m,
                            StreetName = "blv. Halic 12"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4795),
                            IsDeleted = false,
                            Latitude = 37.9916167m,
                            Longitude = 23.7363294m,
                            StreetName = "blv. Zeus 12"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4857),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m,
                            StreetName = "blv. Romunska Morava 1"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4865),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        },
                        new
                        {
                            Id = 7,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4868),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4871),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        },
                        new
                        {
                            Id = 9,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(4875),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(5899),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(6312),
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(6326),
                            IsDeleted = false,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(6328),
                            IsDeleted = false,
                            Name = "NotConfirmed"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasCheckConstraint("Password_contains_space", "Password NOT LIKE '% %'");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 822, DateTimeKind.Utc).AddTicks(9440),
                            Email = "mishkov@misho.com",
                            EmailConfirmed = true,
                            FirstName = "Misho",
                            LastName = "Mishkov",
                            Password = "$2a$11$414SjUNQgHASPwloWblZjOvEDCCM913EU3hkY7iEv.xTjfUUGKkBu",
                            PhoneNumber = "+35920768005",
                            Username = "misha_m"
                        },
                        new
                        {
                            Id = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            AddressId = 2,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 43, DateTimeKind.Utc).AddTicks(9959),
                            Email = "petio@mvc.net",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            LastName = "Petrov",
                            Password = "$2a$11$ODdt2dtTaSOOaPDrBt7B/OjlK1DJBa6L7zZui32Yt38B9TZs17uYe",
                            PhoneNumber = "+35924492877",
                            Username = "petio_p"
                        },
                        new
                        {
                            Id = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            AddressId = 3,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 248, DateTimeKind.Utc).AddTicks(5459),
                            Email = "koksal@asd.tr",
                            EmailConfirmed = true,
                            FirstName = "Koksal",
                            LastName = "Baba",
                            Password = "$2a$11$RR6YyXslhNzOZF14zxFpX.e.pAjVqwaZ.OLrNBbwdmkzqnsGhzWSK",
                            PhoneNumber = "+35922649764",
                            Username = "koksal"
                        },
                        new
                        {
                            Id = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            AddressId = 1,
                            ApplicationRoleId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 445, DateTimeKind.Utc).AddTicks(2774),
                            Email = "indebt@greece.gov",
                            EmailConfirmed = true,
                            FirstName = "Nikolaos",
                            LastName = "Tsitsibaris",
                            Password = "$2a$11$1KuvXARVarDrHgtApqKspuO10f6Vx/ljG7UV/Az0LRk9CGSWiJ7eu",
                            PhoneNumber = "+35924775508",
                            Username = "cicibar"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BlockedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Ban");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            BlockedDue = new DateTime(2021, 12, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BlockedOn = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 650, DateTimeKind.Utc).AddTicks(2406)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            BlockedOn = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 654, DateTimeKind.Utc).AddTicks(9755)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(7371),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8924),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8970),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8973),
                            IsDeleted = false,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8975),
                            IsDeleted = false,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8982),
                            IsDeleted = false,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8985),
                            IsDeleted = false,
                            Name = "Patras"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8986),
                            IsDeleted = false,
                            Name = "Yash"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8988),
                            IsDeleted = false,
                            Name = "Odrin"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8991),
                            IsDeleted = false,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8993),
                            IsDeleted = false,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 821, DateTimeKind.Utc).AddTicks(8995),
                            IsDeleted = false,
                            Name = "Craiova"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 819, DateTimeKind.Utc).AddTicks(8035),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 819, DateTimeKind.Utc).AddTicks(9958),
                            IsDeleted = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 819, DateTimeKind.Utc).AddTicks(9986),
                            IsDeleted = false,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 18, 819, DateTimeKind.Utc).AddTicks(9988),
                            IsDeleted = false,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.GoogleAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GoogleAccount");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(7172),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(8577),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(8613),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(8616),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedByUserId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 657, DateTimeKind.Utc).AddTicks(406),
                            Feedback = "Nice car",
                            IsReport = false,
                            TripId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            AddedByUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            ApplicationUserId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 657, DateTimeKind.Utc).AddTicks(2807),
                            Feedback = "Bad person",
                            IsReport = false,
                            TripId = 1,
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            AddedByUserId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 657, DateTimeKind.Utc).AddTicks(2917),
                            Feedback = "(No feedback)",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StartAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("StartAddressId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalComment = "(No comment)",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 655, DateTimeKind.Utc).AddTicks(4825),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 655, DateTimeKind.Local).AddTicks(8028),
                            DestinationAddressId = 2,
                            Distance = 340,
                            DriverId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            DurationInMinutes = 90,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(827),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(898),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1016),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1050),
                            DestinationAddressId = 2,
                            Distance = 210,
                            DriverId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            DurationInMinutes = 110,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 4,
                            AdditionalComment = "Long comment here",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1066),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1071),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdditionalComment = "Additional comments below",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1080),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1085),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 6,
                            AdditionalComment = "follow me on twitter",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1105),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1111),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 7,
                            AdditionalComment = "NO EATING",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1120),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1123),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 8,
                            AdditionalComment = "CHEAP AND FAST",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1132),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1136),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdditionalComment = "FAST FAST FAST",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1143),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1146),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdditionalComment = "No pets",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1157),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1162),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdditionalComment = "NO SMOKING NO FOOD",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1172),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1176),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 19.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 12,
                            AdditionalComment = "NO STOPS",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1898),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1915),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.55m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 13,
                            AdditionalComment = "Good looking and friendly",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1963),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1969),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.13m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 14,
                            AdditionalComment = "Fast car",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(1984),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(1989),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 15,
                            AdditionalComment = "High price",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(2000),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(2004),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.21m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 16,
                            AdditionalComment = "Im not alone",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(2013),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(2016),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 21.21m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdditionalComment = "No kids",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(2022),
                            DepartureTime = new DateTime(2021, 12, 1, 13, 58, 19, 656, DateTimeKind.Local).AddTicks(2025),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 12.23m,
                            StartAddressId = 1
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(4133)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(5401)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(5434)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(5438)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 656, DateTimeKind.Utc).AddTicks(5449)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelConsumptionPerHundredKilometers")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("2ea9a080-2505-44c8-b947-b7cfdbdfc8c9"),
                            Color = "Red",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 649, DateTimeKind.Utc).AddTicks(6247),
                            FuelConsumptionPerHundredKilometers = 12.0,
                            IsDeleted = false,
                            Model = "Ferrari"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("0858a9a0-b031-44bf-bec9-9d5ce348eebf"),
                            Color = "Blue",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 649, DateTimeKind.Utc).AddTicks(9181),
                            FuelConsumptionPerHundredKilometers = 8.0,
                            IsDeleted = false,
                            Model = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("bf51d535-2d13-45ab-a466-d862228a3b7f"),
                            Color = "Black",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 649, DateTimeKind.Utc).AddTicks(9292),
                            FuelConsumptionPerHundredKilometers = 10.0,
                            IsDeleted = false,
                            Model = "Mercedes S Class"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("5fad43a2-73d7-484b-8f45-f4323025e2a5"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 1, 11, 58, 19, 649, DateTimeKind.Utc).AddTicks(9342),
                            FuelConsumptionPerHundredKilometers = 15.0,
                            IsDeleted = false,
                            Model = "BMW M5"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "Address")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Ban")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.Ban", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.ProfilePicture", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "DestinationAddress")
                        .WithMany("TripsDestinationAddress")
                        .HasForeignKey("DestinationAddressId")
                        .HasConstraintName("FK_Trips_DestinationAddresses")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Trips_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "StartAddress")
                        .WithMany("TripsStartAddress")
                        .HasForeignKey("StartAddressId")
                        .HasConstraintName("FK_Trips_StartAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("TripsAsPassenger")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_TripPassengerRelation_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripPassengerRelation_Trips")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.UserVehicle", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
