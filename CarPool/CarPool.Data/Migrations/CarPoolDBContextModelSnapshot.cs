// <auto-generated />
using System;
using CarPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPool.Data.Migrations
{
    [DbContext(typeof(CarPoolDBContext))]
    partial class CarPoolDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(4077),
                            IsDeleted = false,
                            Latitude = 42.6860436m,
                            Longitude = 23.320311m,
                            StreetName = "Vasil Levski 14"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5924),
                            IsDeleted = false,
                            Latitude = 42.1382815m,
                            Longitude = 24.7604295m,
                            StreetName = "bulevard Iztochen 23"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5962),
                            IsDeleted = false,
                            Latitude = 43.2126824m,
                            Longitude = 27.9168517m,
                            StreetName = "bulevard Tsar Osvoboditel 83b"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5964),
                            IsDeleted = false,
                            Latitude = 41.0403314m,
                            Longitude = 28.939206m,
                            StreetName = "Defterdar, Ayvansaray Cd., 34050 Eyüpsultan"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5966),
                            IsDeleted = false,
                            Latitude = 37.981142m,
                            Longitude = 23.732380m,
                            StreetName = "Ippokratous 1"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 6,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5969),
                            IsDeleted = false,
                            Latitude = 40.640014m,
                            Longitude = 22.944397m
                        },
                        new
                        {
                            Id = 7,
                            CityId = 7,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5972),
                            IsDeleted = false,
                            Latitude = 38.232467m,
                            Longitude = 21.736326m
                        },
                        new
                        {
                            Id = 8,
                            CityId = 8,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5974),
                            IsDeleted = false,
                            Latitude = 47.151716m,
                            Longitude = 27.587696m
                        },
                        new
                        {
                            Id = 9,
                            CityId = 9,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(5975),
                            IsDeleted = false,
                            Latitude = 41.669344m,
                            Longitude = 26.568406m
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(6552),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(6759),
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(6767),
                            IsDeleted = false,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(6768),
                            IsDeleted = false,
                            Name = "NotConfirmed"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasCheckConstraint("Password_contains_space", "Password NOT LIKE '% %'");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(8831),
                            Email = "kalin@telerik.com",
                            EmailConfirmed = true,
                            FirstName = "Kalin",
                            LastName = "Balimezov",
                            Password = "$2a$11$.nYYAu4S.ilhPxzLquae7OhuELHk0MyvF7HQnX.ziXDkJ3TLv4ft2",
                            PhoneNumber = "+35920768005",
                            Username = "kalin"
                        },
                        new
                        {
                            Id = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            AddressId = 2,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 58, DateTimeKind.Utc).AddTicks(7490),
                            Email = "petio@mvc.net",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            LastName = "Petrov",
                            Password = "$2a$11$cH7FycBcXHdJv2MybSA72u.0aLpusO8wy6AWWcnDInvzzjVdurfXa",
                            PhoneNumber = "+35924492877",
                            Username = "petio_p"
                        },
                        new
                        {
                            Id = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            AddressId = 3,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 174, DateTimeKind.Utc).AddTicks(1518),
                            Email = "koksal@asd.tr",
                            EmailConfirmed = true,
                            FirstName = "Koksal",
                            LastName = "Baba",
                            Password = "$2a$11$qUYwpTVxDN0zjwAXhR88teF3IdrDvc8H4kGNECBMpEHpvmbF2vIsa",
                            PhoneNumber = "+35922649764",
                            Username = "koksal"
                        },
                        new
                        {
                            Id = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            AddressId = 3,
                            ApplicationRoleId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 289, DateTimeKind.Utc).AddTicks(9717),
                            Email = "indebt@greece.gov",
                            EmailConfirmed = true,
                            FirstName = "Nikolaos",
                            LastName = "Tsitsibaris",
                            Password = "$2a$11$cBknGAXR6/UxqZW68yvUUuOzF/SiWa6lk64AxJQrEG3A30/RWTiYC",
                            PhoneNumber = "+35924775508",
                            Username = "Tsitsibaris"
                        },
                        new
                        {
                            Id = new Guid("8c25dda0-4d74-4dd6-9726-5e0b5e3cf80a"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 408, DateTimeKind.Utc).AddTicks(2432),
                            Email = "joro@telerik.com",
                            EmailConfirmed = true,
                            FirstName = "georgi",
                            LastName = "petrov",
                            Password = "$2a$11$QPwJO8zk/9.GnHzq7zo5a.YquAhTIEBiFI0WqTI5/K7CTbDJ05hW6",
                            PhoneNumber = "+35920768015",
                            Username = "georgi"
                        },
                        new
                        {
                            Id = new Guid("91bc6803-d0da-4749-aeef-5d8626fa44d1"),
                            AddressId = 1,
                            ApplicationRoleId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 524, DateTimeKind.Utc).AddTicks(4825),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "$2a$11$Oo.UYUJV3GZauor.j3v2FODTyjrhuIn7NqlYo5i3jn.zUJcPgwjIa",
                            PhoneNumber = "+35920738011",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            AddressId = 4,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 640, DateTimeKind.Utc).AddTicks(1527),
                            Email = "merkez@grece.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Merkez",
                            Password = "$2a$11$rH1XpmZYNkdmfHWwYSehT.wDrXnNs/KUFdreGLJOUF31wy3vygZUG",
                            PhoneNumber = "+32920728011",
                            Username = "Carlitos"
                        },
                        new
                        {
                            Id = new Guid("46646e15-77ae-46fa-baea-35662317fac2"),
                            AddressId = 5,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 762, DateTimeKind.Utc).AddTicks(6049),
                            Email = "ramen@aoc.com",
                            EmailConfirmed = true,
                            FirstName = "Ramos",
                            LastName = "Enerto",
                            Password = "$2a$11$.EP5CIzL0q73DemG9c4ILe3gHkbbxXYcrujamQIOxAg0d34xrtRru",
                            PhoneNumber = "+3292234215",
                            Username = "Ramen"
                        },
                        new
                        {
                            Id = new Guid("435ebf58-8c90-4e46-8bdf-ccf72c20eb1f"),
                            AddressId = 9,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 882, DateTimeKind.Utc).AddTicks(5312),
                            Email = "pewdie@yt.com",
                            EmailConfirmed = true,
                            FirstName = "Felix",
                            LastName = "Kjellberg ",
                            Password = "$2a$11$MfbifmkZsQD4PFX3ixN7nuRWKrO.OIIAfsgYKwppMwTyuFsDyWiAm",
                            PhoneNumber = "+3291238015",
                            Username = "PewDie"
                        },
                        new
                        {
                            Id = new Guid("9c3c3086-944d-4d1f-9848-657161d86af7"),
                            AddressId = 9,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 51, 999, DateTimeKind.Utc).AddTicks(2254),
                            Email = "christopher@nip.se",
                            EmailConfirmed = true,
                            FirstName = "Christopher",
                            LastName = "Alesund",
                            Password = "$2a$11$7iUmROqYxF9rIxnwnicXeuDZmwcxjh.TRhdjTjEMlDzjkibkRbDay",
                            PhoneNumber = "+3292233015",
                            Username = "Get_RighT"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BlockedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Bans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            BlockedDue = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            BlockedOn = new DateTime(2021, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(7992)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            BlockedOn = new DateTime(2021, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 117, DateTimeKind.Utc).AddTicks(6918)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(1841),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2719),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2744),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2746),
                            IsDeleted = false,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2747),
                            IsDeleted = false,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2751),
                            IsDeleted = false,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2752),
                            IsDeleted = false,
                            Name = "Patras"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2753),
                            IsDeleted = false,
                            Name = "Yash"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2754),
                            IsDeleted = false,
                            Name = "Odrin"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2756),
                            IsDeleted = false,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2757),
                            IsDeleted = false,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 937, DateTimeKind.Utc).AddTicks(2758),
                            IsDeleted = false,
                            Name = "Craiova"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 935, DateTimeKind.Utc).AddTicks(9972),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 936, DateTimeKind.Utc).AddTicks(1163),
                            IsDeleted = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 936, DateTimeKind.Utc).AddTicks(1193),
                            IsDeleted = false,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 50, 936, DateTimeKind.Utc).AddTicks(1195),
                            IsDeleted = false,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.GoogleAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GoogleAccount");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3222),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3663),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3676),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3677),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = new Guid("8c25dda0-4d74-4dd6-9726-5e0b5e3cf80a"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3678),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = new Guid("91bc6803-d0da-4749-aeef-5d8626fa44d1"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3680),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3681),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = new Guid("46646e15-77ae-46fa-baea-35662317fac2"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3682),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = new Guid("435ebf58-8c90-4e46-8bdf-ccf72c20eb1f"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3683),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = new Guid("9c3c3086-944d-4d1f-9848-657161d86af7"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(3685),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedByUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            ApplicationUserId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(4350),
                            Feedback = "Nice car",
                            IsReport = false,
                            TripId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            AddedByUserId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            ApplicationUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5514),
                            Feedback = "Bad person",
                            IsReport = true,
                            TripId = 2,
                            Value = 0
                        },
                        new
                        {
                            Id = 3,
                            AddedByUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            ApplicationUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5707),
                            Feedback = "Great trip",
                            IsReport = false,
                            TripId = 3,
                            Value = 5
                        },
                        new
                        {
                            Id = 4,
                            AddedByUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            ApplicationUserId = new Guid("8c25dda0-4d74-4dd6-9726-5e0b5e3cf80a"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5719),
                            Feedback = "dirty car, good person",
                            IsReport = false,
                            TripId = 4,
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            AddedByUserId = new Guid("8c25dda0-4d74-4dd6-9726-5e0b5e3cf80a"),
                            ApplicationUserId = new Guid("91bc6803-d0da-4749-aeef-5d8626fa44d1"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5721),
                            Feedback = "Great trip",
                            IsReport = false,
                            TripId = 5,
                            Value = 3
                        },
                        new
                        {
                            Id = 6,
                            AddedByUserId = new Guid("91bc6803-d0da-4749-aeef-5d8626fa44d1"),
                            ApplicationUserId = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5726),
                            Feedback = "safe driver",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        },
                        new
                        {
                            Id = 7,
                            AddedByUserId = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            ApplicationUserId = new Guid("46646e15-77ae-46fa-baea-35662317fac2"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5727),
                            Feedback = "Bad driver",
                            IsReport = true,
                            TripId = 5,
                            Value = 0
                        },
                        new
                        {
                            Id = 8,
                            AddedByUserId = new Guid("46646e15-77ae-46fa-baea-35662317fac2"),
                            ApplicationUserId = new Guid("435ebf58-8c90-4e46-8bdf-ccf72c20eb1f"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5732),
                            Feedback = "Good friend",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        },
                        new
                        {
                            Id = 9,
                            AddedByUserId = new Guid("435ebf58-8c90-4e46-8bdf-ccf72c20eb1f"),
                            ApplicationUserId = new Guid("9c3c3086-944d-4d1f-9848-657161d86af7"),
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(5733),
                            Feedback = "Best driver",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StartAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("StartAddressId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalComment = "(No comment)",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 117, DateTimeKind.Utc).AddTicks(8777),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 117, DateTimeKind.Local).AddTicks(9817),
                            DestinationAddressId = 2,
                            Distance = 340,
                            DriverId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            DurationInMinutes = 90,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(640),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(670),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(725),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(726),
                            DestinationAddressId = 2,
                            Distance = 210,
                            DriverId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            DurationInMinutes = 110,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 4,
                            AdditionalComment = "Long comment here",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(730),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(731),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdditionalComment = "Additional comments below",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(788),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(790),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 6,
                            AdditionalComment = "follow me on twitter",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(795),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(796),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 7,
                            AdditionalComment = "NO EATING",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(799),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(800),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 8,
                            AdditionalComment = "CHEAP AND FAST",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(802),
                            DepartureTime = new DateTime(2021, 12, 9, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(803),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdditionalComment = "FAST FAST FAST",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(806),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(807),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdditionalComment = "No pets",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(810),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(811),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdditionalComment = "NO SMOKING NO FOOD",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(814),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(815),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 19.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 12,
                            AdditionalComment = "NO STOPS",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(1074),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(1078),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.55m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 13,
                            AdditionalComment = "Good looking and friendly",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(1095),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(1096),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.13m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 14,
                            AdditionalComment = "Fast car",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(1099),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(1100),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 15,
                            AdditionalComment = "High price",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(1103),
                            DepartureTime = new DateTime(2021, 12, 7, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(1104),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.21m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 16,
                            AdditionalComment = "Im not alone",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(1107),
                            DepartureTime = new DateTime(2021, 12, 5, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(1108),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 21.21m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdditionalComment = "No kids",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(1110),
                            DepartureTime = new DateTime(2021, 12, 5, 13, 4, 52, 118, DateTimeKind.Local).AddTicks(1111),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 12.23m,
                            StartAddressId = 1
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2055)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2488)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2501)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2502)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2503)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2505)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2506)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 4,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2507)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 5,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2507)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 6,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2509)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 7,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2510)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 8,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2511)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            TripId = 15,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2512)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            TripId = 16,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2513)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            TripId = 15,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2513)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            TripId = 16,
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 118, DateTimeKind.Utc).AddTicks(2514)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelConsumptionPerHundredKilometers")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("19a17487-8cc6-4dbb-871b-ddba1194d713"),
                            Color = "Red",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(4823),
                            FuelConsumptionPerHundredKilometers = 12.0,
                            IsDeleted = false,
                            Model = "Ferrari"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("a37d567a-58e0-4f85-8ef8-8096d35ae082"),
                            Color = "Blue",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6040),
                            FuelConsumptionPerHundredKilometers = 8.0,
                            IsDeleted = false,
                            Model = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("4df7963a-e527-4f54-ae34-aeb2c1671712"),
                            Color = "Black",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6083),
                            FuelConsumptionPerHundredKilometers = 10.0,
                            IsDeleted = false,
                            Model = "Mercedes S Class"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("1f21aada-53b7-40c2-ab55-4c36d79dbcdb"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6102),
                            FuelConsumptionPerHundredKilometers = 15.0,
                            IsDeleted = false,
                            Model = "BMW M5"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = new Guid("8c25dda0-4d74-4dd6-9726-5e0b5e3cf80a"),
                            Color = "Green",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6120),
                            FuelConsumptionPerHundredKilometers = 11.0,
                            IsDeleted = false,
                            Model = "Lambo"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = new Guid("91bc6803-d0da-4749-aeef-5d8626fa44d1"),
                            Color = "Black",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6148),
                            FuelConsumptionPerHundredKilometers = 9.0,
                            IsDeleted = false,
                            Model = "Golf4"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = new Guid("bc5f8082-fd7c-4d24-b56f-cf95e4478778"),
                            Color = "Orange",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6166),
                            FuelConsumptionPerHundredKilometers = 10.0,
                            IsDeleted = false,
                            Model = "Dacia"
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = new Guid("46646e15-77ae-46fa-baea-35662317fac2"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6184),
                            FuelConsumptionPerHundredKilometers = 6.0,
                            IsDeleted = false,
                            Model = "BMW M5"
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = new Guid("435ebf58-8c90-4e46-8bdf-ccf72c20eb1f"),
                            Color = "Carbon Black",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6202),
                            FuelConsumptionPerHundredKilometers = 2.0,
                            IsDeleted = false,
                            Model = "Tesla Model S"
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = new Guid("9c3c3086-944d-4d1f-9848-657161d86af7"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 7, 11, 4, 52, 115, DateTimeKind.Utc).AddTicks(6228),
                            FuelConsumptionPerHundredKilometers = 16.0,
                            IsDeleted = false,
                            Model = "Mercedes-Benz S Coupe"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "Address")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Ban")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.Ban", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Inbox", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("InboxMessages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.ProfilePicture", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "DestinationAddress")
                        .WithMany("TripsDestinationAddress")
                        .HasForeignKey("DestinationAddressId")
                        .HasConstraintName("FK_Trips_DestinationAddresses")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Trips_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "StartAddress")
                        .WithMany("TripsStartAddress")
                        .HasForeignKey("StartAddressId")
                        .HasConstraintName("FK_Trips_StartAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("TripsAsPassenger")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_TripPassengerRelation_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripPassengerRelation_Trips")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.UserVehicle", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
