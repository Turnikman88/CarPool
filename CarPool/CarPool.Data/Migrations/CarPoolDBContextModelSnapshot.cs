// <auto-generated />
using System;
using CarPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPool.Data.Migrations
{
    [DbContext(typeof(CarPoolDBContext))]
    partial class CarPoolDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(8707),
                            IsDeleted = false,
                            Latitude = 42.698334m,
                            Longitude = 23.319941m,
                            StreetName = "Vasil Levski 14"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(2244),
                            IsDeleted = false,
                            Latitude = 42.682073m,
                            Longitude = 23.326622m,
                            StreetName = "blv. Iztochen 23"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(2294),
                            IsDeleted = false,
                            Latitude = 42.698334m,
                            Longitude = 23.254942m,
                            StreetName = "blv. Halic 12"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(2299),
                            IsDeleted = false,
                            Latitude = 42.711242m,
                            Longitude = 23.316655m,
                            StreetName = "blv. Zeus 12"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(2302),
                            IsDeleted = false,
                            Latitude = 42.625045m,
                            Longitude = 23.400539m,
                            StreetName = "blv. Romunska Morava 1"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(3274),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(3693),
                            IsDeleted = false,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasCheckConstraint("Password_contains_space", "Password NOT LIKE '% %'");

                    b.HasData(
                        new
                        {
                            Id = new Guid("290cf74e-bdfb-4e0a-ac50-b88de1fc0943"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(9278),
                            Email = "mishkov@misho.com",
                            EmailConfirmed = true,
                            FirstName = "Misho",
                            IsDeleted = false,
                            LastName = "Mishkov",
                            Password = "12345678",
                            PhoneNumber = "+35920768005",
                            Username = "misha_m"
                        },
                        new
                        {
                            Id = new Guid("fccf0997-2cd2-4ce4-a127-39452ee20a5f"),
                            AddressId = 2,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 795, DateTimeKind.Utc).AddTicks(4143),
                            Email = "petio@mvc.net",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IsDeleted = false,
                            LastName = "Petrov",
                            Password = "123456789",
                            PhoneNumber = "+35924492877",
                            Username = "petio_p"
                        },
                        new
                        {
                            Id = new Guid("6411da32-b11f-4379-92f7-2e21fe3652dc"),
                            AddressId = 3,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 795, DateTimeKind.Utc).AddTicks(4216),
                            Email = "koksal@asd.tr",
                            EmailConfirmed = true,
                            FirstName = "Koksal",
                            IsDeleted = false,
                            LastName = "Baba",
                            Password = "1234567899",
                            PhoneNumber = "+35922649764",
                            Username = "koksal"
                        },
                        new
                        {
                            Id = new Guid("ac2da12e-a399-4a90-a1cd-215ff2b9e8a7"),
                            AddressId = 4,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 795, DateTimeKind.Utc).AddTicks(4222),
                            Email = "indebt@greece.gov",
                            EmailConfirmed = true,
                            FirstName = "Nikolaos",
                            IsDeleted = false,
                            LastName = "Tsitsibaris",
                            Password = "12345678999",
                            PhoneNumber = "+35924775508",
                            Username = "cicibar"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BlockedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPermanentBlock")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Ban");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("fccf0997-2cd2-4ce4-a127-39452ee20a5f"),
                            BlockedDue = new DateTime(2021, 11, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            BlockedOn = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 795, DateTimeKind.Utc).AddTicks(5170),
                            IsPermanentBlock = false
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("fccf0997-2cd2-4ce4-a127-39452ee20a5f"),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 798, DateTimeKind.Utc).AddTicks(3614),
                            IsPermanentBlock = true
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(4964),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6497),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6524),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6527),
                            IsDeleted = false,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6529),
                            IsDeleted = false,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6534),
                            IsDeleted = false,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6536),
                            IsDeleted = false,
                            Name = "Patras"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6593),
                            IsDeleted = false,
                            Name = "Yash"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6596),
                            IsDeleted = false,
                            Name = "Odrin"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6600),
                            IsDeleted = false,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6602),
                            IsDeleted = false,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 793, DateTimeKind.Utc).AddTicks(6604),
                            IsDeleted = false,
                            Name = "Craiova"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 791, DateTimeKind.Utc).AddTicks(7760),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 791, DateTimeKind.Utc).AddTicks(9409),
                            IsDeleted = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 791, DateTimeKind.Utc).AddTicks(9436),
                            IsDeleted = false,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 791, DateTimeKind.Utc).AddTicks(9439),
                            IsDeleted = false,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("290cf74e-bdfb-4e0a-ac50-b88de1fc0943"),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 798, DateTimeKind.Utc).AddTicks(9408),
                            ImageTitle = "(No title)"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedByUserId = new Guid("290cf74e-bdfb-4e0a-ac50-b88de1fc0943"),
                            ApplicationUserId = new Guid("fccf0997-2cd2-4ce4-a127-39452ee20a5f"),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(4820),
                            Feedback = "Nice car",
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            AddedByUserId = new Guid("fccf0997-2cd2-4ce4-a127-39452ee20a5f"),
                            ApplicationUserId = new Guid("290cf74e-bdfb-4e0a-ac50-b88de1fc0943"),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(6351),
                            Feedback = "Bad person",
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            AddedByUserId = new Guid("6411da32-b11f-4379-92f7-2e21fe3652dc"),
                            ApplicationUserId = new Guid("ac2da12e-a399-4a90-a1cd-215ff2b9e8a7"),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 794, DateTimeKind.Utc).AddTicks(6384),
                            Feedback = "(No feedback)",
                            Value = 5
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAddressId")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StartAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("StartAddressId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalComment = "(No comment)",
                            ArrivalTime = new DateTime(2021, 11, 12, 0, 51, 40, 798, DateTimeKind.Local).AddTicks(6451),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 798, DateTimeKind.Utc).AddTicks(4881),
                            DepartureTime = new DateTime(2021, 11, 11, 21, 51, 40, 798, DateTimeKind.Local).AddTicks(6053),
                            DestinationAddressId = 2,
                            Distance = 340.0,
                            DriverId = new Guid("290cf74e-bdfb-4e0a-ac50-b88de1fc0943"),
                            FreeSeats = 2,
                            IsDeleted = false,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalComment = "NO SMOKEING",
                            ArrivalTime = new DateTime(2021, 11, 11, 23, 51, 40, 798, DateTimeKind.Local).AddTicks(7943),
                            CreatedOn = new DateTime(2021, 11, 11, 19, 51, 40, 798, DateTimeKind.Utc).AddTicks(7893),
                            DepartureTime = new DateTime(2021, 11, 11, 21, 51, 40, 798, DateTimeKind.Local).AddTicks(7922),
                            DestinationAddressId = 3,
                            Distance = 240.0,
                            DriverId = new Guid("fccf0997-2cd2-4ce4-a127-39452ee20a5f"),
                            FreeSeats = 2,
                            IsDeleted = false,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "Address")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Ban")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.Ban", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.ProfilePicture", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "DestinationAddress")
                        .WithMany("TripsDestinationAddress")
                        .HasForeignKey("DestinationAddressId")
                        .HasConstraintName("FK_Trips_DestinationAddresses")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Trips_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "StartAddress")
                        .WithMany("TripsStartAddress")
                        .HasForeignKey("StartAddressId")
                        .HasConstraintName("FK_Trips_StartAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_TripPassengerRelation_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripPassengerRelation_Trips")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
