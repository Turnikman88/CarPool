// <auto-generated />
using System;
using CarPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPool.Data.Migrations
{
    [DbContext(typeof(CarPoolDBContext))]
    partial class CarPoolDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(8532),
                            IsDeleted = false,
                            Latitude = 42.6860436m,
                            Longitude = 23.320311m,
                            StreetName = "Vasil Levski 14"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2085),
                            IsDeleted = false,
                            Latitude = 42.1382775m,
                            Longitude = 24.7604295m,
                            StreetName = "blv. Iztochen 23"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2144),
                            IsDeleted = false,
                            Latitude = 41.022079m,
                            Longitude = 28.9483964m,
                            StreetName = "blv. Halic 12"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2150),
                            IsDeleted = false,
                            Latitude = 37.9916167m,
                            Longitude = 23.7363294m,
                            StreetName = "blv. Zeus 12"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2153),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m,
                            StreetName = "blv. Romunska Morava 1"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2159),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        },
                        new
                        {
                            Id = 7,
                            CityId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2162),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2165),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        },
                        new
                        {
                            Id = 9,
                            CityId = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(2168),
                            IsDeleted = false,
                            Latitude = 44.432558m,
                            Longitude = 26.111871m
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(3281),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(3728),
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(3742),
                            IsDeleted = false,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(3744),
                            IsDeleted = false,
                            Name = "NotConfirmed"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasCheckConstraint("Password_contains_space", "Password NOT LIKE '% %'");

                    b.HasData(
                        new
                        {
                            Id = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            AddressId = 1,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 639, DateTimeKind.Utc).AddTicks(7044),
                            Email = "mishkov@misho.com",
                            EmailConfirmed = true,
                            FirstName = "Misho",
                            LastName = "Mishkov",
                            Password = "$2a$11$DsUqL3nvjvqLkpQUv/d5Ku66lFIcQU7jufzPReMzwanlN7snuVFPq",
                            PhoneNumber = "+35920768005",
                            Username = "misha_m"
                        },
                        new
                        {
                            Id = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            AddressId = 2,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 836, DateTimeKind.Utc).AddTicks(415),
                            Email = "petio@mvc.net",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            LastName = "Petrov",
                            Password = "$2a$11$k9SaP82YaCEWyR7AlPfDo.LL.F0A9EbJUNxUHyo/K5bSQMW5OcN26",
                            PhoneNumber = "+35924492877",
                            Username = "petio_p"
                        },
                        new
                        {
                            Id = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            AddressId = 3,
                            ApplicationRoleId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 34, DateTimeKind.Utc).AddTicks(3315),
                            Email = "koksal@asd.tr",
                            EmailConfirmed = true,
                            FirstName = "Koksal",
                            LastName = "Baba",
                            Password = "$2a$11$H3E9s.K4cOCTmDsfoafJLuB5hkggHtgP7VzHNxUGizLeaDjIAx/WW",
                            PhoneNumber = "+35922649764",
                            Username = "koksal"
                        },
                        new
                        {
                            Id = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            AddressId = 1,
                            ApplicationRoleId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 240, DateTimeKind.Utc).AddTicks(5517),
                            Email = "indebt@greece.gov",
                            EmailConfirmed = true,
                            FirstName = "Nikolaos",
                            LastName = "Tsitsibaris",
                            Password = "$2a$11$ceqvPmCeCUFCxn0Ed4EkZuxtcEmIHI887SyxkYsRJ2yvpnQORwsJ2",
                            PhoneNumber = "+35924775508",
                            Username = "cicibar"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BlockedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Bans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            BlockedDue = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            BlockedOn = new DateTime(2021, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 448, DateTimeKind.Utc).AddTicks(1845)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            BlockedOn = new DateTime(2021, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 451, DateTimeKind.Utc).AddTicks(9726)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(4445),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6165),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6206),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6210),
                            IsDeleted = false,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6212),
                            IsDeleted = false,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6219),
                            IsDeleted = false,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6221),
                            IsDeleted = false,
                            Name = "Patras"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6223),
                            IsDeleted = false,
                            Name = "Yash"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6225),
                            IsDeleted = false,
                            Name = "Odrin"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6228),
                            IsDeleted = false,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6230),
                            IsDeleted = false,
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 638, DateTimeKind.Utc).AddTicks(6232),
                            IsDeleted = false,
                            Name = "Craiova"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 636, DateTimeKind.Utc).AddTicks(5405),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 636, DateTimeKind.Utc).AddTicks(7234),
                            IsDeleted = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 636, DateTimeKind.Utc).AddTicks(7260),
                            IsDeleted = false,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 45, 636, DateTimeKind.Utc).AddTicks(7262),
                            IsDeleted = false,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.GoogleAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GoogleAccount");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(3126),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(4031),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(4080),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(4083),
                            ImageLink = "https://ik.imagekit.io/hb0rsbgap4f2/profilepicture_qVGMALiir.png?updatedAt=1637784974343",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedByUserId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(5341),
                            Feedback = "Nice car",
                            IsReport = false,
                            TripId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            AddedByUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            ApplicationUserId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(7308),
                            Feedback = "Bad person",
                            IsReport = false,
                            TripId = 1,
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            AddedByUserId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(7354),
                            Feedback = "(No feedback)",
                            IsReport = false,
                            TripId = 5,
                            Value = 5
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StartAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("StartAddressId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalComment = "(No comment)",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(3380),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(5880),
                            DestinationAddressId = 2,
                            Distance = 340,
                            DriverId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            DurationInMinutes = 90,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(7971),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8015),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdditionalComment = "NO SMOKING",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8066),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8070),
                            DestinationAddressId = 2,
                            Distance = 210,
                            DriverId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            DurationInMinutes = 110,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 4,
                            AdditionalComment = "Long comment here",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8077),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8080),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 5,
                            AdditionalComment = "Additional comments below",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8084),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8087),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 6,
                            AdditionalComment = "follow me on twitter",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8099),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8101),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 7,
                            AdditionalComment = "NO EATING",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8106),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8109),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 8,
                            AdditionalComment = "CHEAP AND FAST",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8113),
                            DepartureTime = new DateTime(2021, 12, 6, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8116),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 9,
                            AdditionalComment = "FAST FAST FAST",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8120),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8123),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 10,
                            AdditionalComment = "No pets",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8129),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8197),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 0m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 11,
                            AdditionalComment = "NO SMOKING NO FOOD",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8204),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8206),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 19.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 12,
                            AdditionalComment = "NO STOPS",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8824),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8840),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.55m,
                            StartAddressId = 4
                        },
                        new
                        {
                            Id = 13,
                            AdditionalComment = "Good looking and friendly",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8888),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8894),
                            DestinationAddressId = 4,
                            Distance = 240,
                            DriverId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.13m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 14,
                            AdditionalComment = "Fast car",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8906),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8912),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 10.11m,
                            StartAddressId = 1
                        },
                        new
                        {
                            Id = 15,
                            AdditionalComment = "High price",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8921),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8925),
                            DestinationAddressId = 2,
                            Distance = 240,
                            DriverId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 15.21m,
                            StartAddressId = 3
                        },
                        new
                        {
                            Id = 16,
                            AdditionalComment = "Im not alone",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8932),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8937),
                            DestinationAddressId = 1,
                            Distance = 240,
                            DriverId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 2,
                            Price = 21.21m,
                            StartAddressId = 2
                        },
                        new
                        {
                            Id = 17,
                            AdditionalComment = "No kids",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 452, DateTimeKind.Utc).AddTicks(8945),
                            DepartureTime = new DateTime(2021, 12, 4, 13, 27, 46, 452, DateTimeKind.Local).AddTicks(8949),
                            DestinationAddressId = 3,
                            Distance = 240,
                            DriverId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            DurationInMinutes = 120,
                            FreeSeats = 2,
                            PassengersCount = 1,
                            Price = 12.23m,
                            StartAddressId = 1
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(461)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(1465)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(1506)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            TripId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(1509)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            TripId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(1511)
                        },
                        new
                        {
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            TripId = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 453, DateTimeKind.Utc).AddTicks(1518)
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelConsumptionPerHundredKilometers")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("168e16f3-0309-4481-ab35-8a7e44e700d2"),
                            Color = "Red",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 447, DateTimeKind.Utc).AddTicks(5551),
                            FuelConsumptionPerHundredKilometers = 12.0,
                            IsDeleted = false,
                            Model = "Ferrari"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("fdf00b2d-57c8-4b0b-a829-f1a84de2cf58"),
                            Color = "Blue",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 447, DateTimeKind.Utc).AddTicks(8250),
                            FuelConsumptionPerHundredKilometers = 8.0,
                            IsDeleted = false,
                            Model = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("ec3b0991-f678-41c8-985f-e6562ee34f22"),
                            Color = "Black",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 447, DateTimeKind.Utc).AddTicks(8358),
                            FuelConsumptionPerHundredKilometers = 10.0,
                            IsDeleted = false,
                            Model = "Mercedes S Class"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("3b9d3177-31fc-4322-9f88-8858f940a8c5"),
                            Color = "Silver",
                            CreatedOn = new DateTime(2021, 12, 4, 11, 27, 46, 447, DateTimeKind.Utc).AddTicks(8415),
                            FuelConsumptionPerHundredKilometers = 15.0,
                            IsDeleted = false,
                            Model = "BMW M5"
                        });
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Address", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ApplicationUser", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "Address")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationRoleId");
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Ban", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Ban")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.Ban", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.City", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.ProfilePicture", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.ProfilePicture", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Rating", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.Trip", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "DestinationAddress")
                        .WithMany("TripsDestinationAddress")
                        .HasForeignKey("DestinationAddressId")
                        .HasConstraintName("FK_Trips_DestinationAddresses")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Trips_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Address", "StartAddress")
                        .WithMany("TripsStartAddress")
                        .HasForeignKey("StartAddressId")
                        .HasConstraintName("FK_Trips_StartAddresses")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.TripPassenger", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithMany("TripsAsPassenger")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_TripPassengerRelation_ApplicationUsers")
                        .IsRequired();

                    b.HasOne("CarPool.Data.Models.DatabaseModels.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripPassengerRelation_Trips")
                        .IsRequired();
                });

            modelBuilder.Entity("CarPool.Data.Models.DatabaseModels.UserVehicle", b =>
                {
                    b.HasOne("CarPool.Data.Models.DatabaseModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarPool.Data.Models.DatabaseModels.UserVehicle", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
