@model ChatViewModel
@{
    this.ViewBag.Title = "Chat";
    Layout = "/Views/Shared/_LayoutEmpty.cshtml";
}

<h1>@this.ViewBag.Title</h1>
<div>
    <input type="button" id="joinGroup" value="Join Private Group" />
</div>

<textarea name="message" id="message"></textarea>
<select id="group">
    
    @foreach (var item in Model.TripsIds)
    {
        var id = $"PrivateGroup#{item}";
        <option value=@id>@id</option>
    }


</select>
<input type="button" id="sendButton" value="Send Message" />

<div id="messages"></div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chat", {
                accessTokenFactory: () => "testing"
            })
            .build();

        connection.on("ReceiveMessage", function (message) {
            var chatInfo = `<div>[${message.date}][${message.user}] said: ${escapeHtml(message.text)}</div>`;
            $("#messages").append(chatInfo);
        });

        connection.on("UserConnected", function (connectionId) {
            var groupElement = document.getElementById("group");
            var option = document.createElement("option");
            option.text = connectionId;
            option.value = connectionId;
            groupElement.add(option);
        });

        connection.on("UserDisconnected", function (connectionId) {
            var groupElement = document.getElementById("group");
            for (var i = 0; i < groupElement.length; i++) {
                if (groupElement.options[i].value == connectionId) {
                    groupElement.remove(i);
                }
            }
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", function (event) {
            var message = document.getElementById("message").value;
            var groupElement = document.getElementById("group");
            var groupValue = groupElement.options[groupElement.selectedIndex].value;

            if (groupValue === "All" || groupValue === "Myself") {
                var method = groupValue === "All" ? "SendMessageToAll" : "SendMessageToCaller";
                connection.invoke(method, message).catch(function (err) {
                    return console.error(err.toString());
                });
            } else if (groupValue === "PrivateGroup") {
                connection.invoke("SendMessageToGroup", "PrivateGroup", message).catch(function (err) {
                    return console.error(err.toString());
                });
            } else {
                connection.invoke("SendMessageToUser", groupValue, message).catch(function (err) {
                    return console.error(err.toString());
                });
            }

            event.preventDefault();
        });

        let idtrip = document.querySelector('[id^="PrivateGroup#"]').id.split('#')[1];
        document.getElementById("joinGroup").addEventListener("click", function (event) {
            connection.invoke("JoinGroup", idtrip).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
}